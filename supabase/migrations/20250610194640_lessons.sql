create table "public"."admins" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null default auth.uid()
);


alter table "public"."admins" enable row level security;

create table "public"."lessons" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "title" character varying not null,
    "description" text,
    "tasks" json not null default '[]'::json,
    "index_number" character varying not null
);


alter table "public"."lessons" enable row level security;

create table "public"."results" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null default auth.uid(),
    "lesson_id" bigint not null,
    "is_finished" boolean not null default false,
    "answers" json not null default '[]'::json,
    "repeats_count" bigint not null default '0'::bigint,
    "completed" double precision not null default '0'::double precision,
    "current_task" bigint not null default '0'::bigint
);


alter table "public"."results" enable row level security;

CREATE UNIQUE INDEX admins_pkey ON public.admins USING btree (id);

CREATE UNIQUE INDEX lessons_pkey ON public.lessons USING btree (id);

CREATE UNIQUE INDEX results_pkey ON public.results USING btree (id);

alter table "public"."admins" add constraint "admins_pkey" PRIMARY KEY using index "admins_pkey";

alter table "public"."lessons" add constraint "lessons_pkey" PRIMARY KEY using index "lessons_pkey";

alter table "public"."results" add constraint "results_pkey" PRIMARY KEY using index "results_pkey";

alter table "public"."admins" add constraint "admins_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."admins" validate constraint "admins_user_id_fkey";

alter table "public"."results" add constraint "results_lesson_id_fkey" FOREIGN KEY (lesson_id) REFERENCES lessons(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."results" validate constraint "results_lesson_id_fkey";

alter table "public"."results" add constraint "results_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."results" validate constraint "results_user_id_fkey";

grant delete on table "public"."admins" to "anon";

grant insert on table "public"."admins" to "anon";

grant references on table "public"."admins" to "anon";

grant select on table "public"."admins" to "anon";

grant trigger on table "public"."admins" to "anon";

grant truncate on table "public"."admins" to "anon";

grant update on table "public"."admins" to "anon";

grant delete on table "public"."admins" to "authenticated";

grant insert on table "public"."admins" to "authenticated";

grant references on table "public"."admins" to "authenticated";

grant select on table "public"."admins" to "authenticated";

grant trigger on table "public"."admins" to "authenticated";

grant truncate on table "public"."admins" to "authenticated";

grant update on table "public"."admins" to "authenticated";

grant delete on table "public"."admins" to "service_role";

grant insert on table "public"."admins" to "service_role";

grant references on table "public"."admins" to "service_role";

grant select on table "public"."admins" to "service_role";

grant trigger on table "public"."admins" to "service_role";

grant truncate on table "public"."admins" to "service_role";

grant update on table "public"."admins" to "service_role";

grant delete on table "public"."lessons" to "anon";

grant insert on table "public"."lessons" to "anon";

grant references on table "public"."lessons" to "anon";

grant select on table "public"."lessons" to "anon";

grant trigger on table "public"."lessons" to "anon";

grant truncate on table "public"."lessons" to "anon";

grant update on table "public"."lessons" to "anon";

grant delete on table "public"."lessons" to "authenticated";

grant insert on table "public"."lessons" to "authenticated";

grant references on table "public"."lessons" to "authenticated";

grant select on table "public"."lessons" to "authenticated";

grant trigger on table "public"."lessons" to "authenticated";

grant truncate on table "public"."lessons" to "authenticated";

grant update on table "public"."lessons" to "authenticated";

grant delete on table "public"."lessons" to "service_role";

grant insert on table "public"."lessons" to "service_role";

grant references on table "public"."lessons" to "service_role";

grant select on table "public"."lessons" to "service_role";

grant trigger on table "public"."lessons" to "service_role";

grant truncate on table "public"."lessons" to "service_role";

grant update on table "public"."lessons" to "service_role";

grant delete on table "public"."results" to "anon";

grant insert on table "public"."results" to "anon";

grant references on table "public"."results" to "anon";

grant select on table "public"."results" to "anon";

grant trigger on table "public"."results" to "anon";

grant truncate on table "public"."results" to "anon";

grant update on table "public"."results" to "anon";

grant delete on table "public"."results" to "authenticated";

grant insert on table "public"."results" to "authenticated";

grant references on table "public"."results" to "authenticated";

grant select on table "public"."results" to "authenticated";

grant trigger on table "public"."results" to "authenticated";

grant truncate on table "public"."results" to "authenticated";

grant update on table "public"."results" to "authenticated";

grant delete on table "public"."results" to "service_role";

grant insert on table "public"."results" to "service_role";

grant references on table "public"."results" to "service_role";

grant select on table "public"."results" to "service_role";

grant trigger on table "public"."results" to "service_role";

grant truncate on table "public"."results" to "service_role";

grant update on table "public"."results" to "service_role";

create policy "Enable read access for all users"
on "public"."admins"
as permissive
for select
to public
using (true);


create policy "Enable access for admins"
on "public"."lessons"
as permissive
for all
to public
using ((( SELECT auth.uid() AS uid) IN ( SELECT admins.user_id
   FROM admins)));


create policy "Enable read access for all users"
on "public"."lessons"
as permissive
for select
to public
using (true);


create policy "Enable insert for authenticated users only"
on "public"."results"
as permissive
for insert
to authenticated
with check (true);


create policy "Enable users to update their own data only"
on "public"."results"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));


create policy "Enable users to view their own data only"
on "public"."results"
as permissive
for select
to authenticated
using ((( SELECT auth.uid() AS uid) = user_id));



